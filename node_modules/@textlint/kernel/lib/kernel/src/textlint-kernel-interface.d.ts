import { TxtNode, TxtNodeType } from "@textlint/ast-node-types";
import { SeverityLevelTypes } from "./shared/type/SeverityLevel";
import RuleContext from "./core/rule-context";
import FilterRuleContext from "./core/filter-rule-context";
/**
 * Rule reporter function
 */
export declare type RuleCreatorReporter = (context: RuleContext, options?: TextlintRuleOptions) => {
    [P in TxtNodeType]?: (node: TxtNode) => void | Promise<any>;
};
/**
 * Filter rule reporter function
 */
export declare type TextlintRuleFixableCreator = {
    linter: RuleCreatorReporter;
    fixer: RuleCreatorReporter;
};
export declare type TextlintRuleCreator = RuleCreatorReporter | TextlintRuleFixableCreator;
export declare type TextlintFilterRuleCreator = (context: FilterRuleContext, options?: TextlintFilterRuleOptions) => {
    [P in TxtNodeType]?: (node: TxtNode) => void | Promise<any>;
};
/**
 * textlint rule option values is object or boolean.
 * if this option value is false, disable the rule.
 */
export declare type TextlintRuleOptions = {
    [index: string]: any;
    severity?: SeverityLevelTypes;
} | boolean;
/**
 * textlint filter rule option values is object or boolean.
 * if this option value is false, disable the filter rule.
 */
export declare type TextlintFilterRuleOptions = {
    [index: string]: any;
} | boolean;
/**
 * textlint plugin option values is object or boolean.
 * if this option value is false, disable the plugin.
 */
export declare type TextlintPluginOptions = {
    [index: string]: any;
} | boolean;
export interface TextlintKernelConstructorOptions {
    /**
     * Suppress messages of severity:warning and severity:info
     */
    quiet?: boolean;
}
export interface TextlintConfigObject {
    rulePaths?: string[];
    extensions?: string[];
    formatterName?: string;
    plugins?: string[];
    rulesBaseDirectory?: string;
    configFile?: string;
    disabledRules?: string[];
    presets?: string[];
    rulesConfig?: Object;
    /**
     * quite options
     */
    quiet?: boolean;
}
export interface TextlintPluginProcessorConstructor extends Function {
    new (options?: TextlintPluginOptions): TextlintPluginProcessor;
    availableExtensions(): Array<string>;
}
export declare class TextlintPluginProcessor {
    constructor(options?: TextlintPluginOptions);
    static availableExtensions(): Array<string>;
    processor(extension: string): {
        preProcess(text: string, filePath?: string): TxtNode;
        postProcess(messages: Array<any>, filePath?: string): {
            messages: Array<any>;
            filePath: string;
        };
    };
}
export interface TextlintPluginCreator {
    Processor: TextlintPluginProcessorConstructor;
}
export interface TextlintKernelPlugin {
    pluginId: string;
    plugin: TextlintPluginCreator;
    options?: TextlintPluginOptions;
}
export interface TextlintKernelRule {
    ruleId: string;
    rule: TextlintRuleCreator;
    options?: TextlintRuleOptions;
}
export interface TextlintKernelFilterRule {
    ruleId: string;
    rule: TextlintFilterRuleCreator;
    options?: TextlintRuleOptions;
}
export interface TextlintKernelOptions {
    ext: string;
    filePath?: string;
    plugins?: TextlintKernelPlugin[];
    rules?: TextlintKernelRule[];
    filterRules?: TextlintKernelFilterRule[];
    configBaseDir?: string;
}
export declare class TextlintFixCommand {
    text: string;
    range: [number, number];
}
export declare class TextlintMessage {
    type: string;
    ruleId: string;
    message: string;
    data?: any;
    fix?: TextlintFixCommand;
    line: number;
    column: number;
    index: number;
    severity: number;
}
export interface TextlintResult {
    filePath: string;
    messages: TextlintMessage[];
}
export interface TextlintFixResult {
    filePath: string;
    output: string;
    messages: TextlintMessage[];
    applyingMessages: TextlintMessage[];
    remainingMessages: TextlintMessage[];
}
